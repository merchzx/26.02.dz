import React from "react";
export function UserEf() {
    const [name, setName] = React.useState("Tom");

    React.useEffect(() => {    
        // Изменяем заголовок html-страницы   
        document.title = `Привет ${name}`;  
        console.log("useEffect");
    },[1]); // эффект срабатывает только один раз - при самом первом рендеринге
          
    function changeName(event) { 
      setName(event.target.value);  
   }
    return (
      <div>
        <h3>Имя: {name}</h3>
         
        <div>
          <p>Имя: <input type="text" value={name} onChange={changeName} /></p>
        </div>
      </div>
    );
  }

  /*Хук useEffect позволяет управлять различными сопутствующими действиями в функциональном компоненте или то, что называется "side effects" (побочные эффекты), например, извлечение данных, ручное изменение структуры DOM, использование таймеров, логгирование и т.д.. То есть в useEffect выполняет те действия, которые мы не можем выполнить в основной части функционального компонента. Этот хук фактически служит той же цели, что методы жизненного цикла componentDidMount, componentDidUpdate и componentWillUnmount в классах-компонентах.

В качестве параметра в useEffect() передается функция. При вызове хука useEffect по сути определяется "эффект", который затем применяется в приложении. Когда именно применяется? По умолчанию React применяет эффект после каждого рендеринга, в том числе при первом рендеринге приложения. Причем поскольку подобные эффекты определены внутри компонента, они имеют доступ к объекту props и к состоянию компонента.*/